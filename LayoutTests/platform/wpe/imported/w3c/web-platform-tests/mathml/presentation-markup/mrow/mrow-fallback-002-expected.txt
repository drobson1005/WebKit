
PASS Invalid <mfrac> should fallback to mrow behaviour when computing preferred logical widths (count == 0)
FAIL Invalid <mfrac> should fallback to mrow behaviour when computing preferred logical widths (count == 1) assert_approx_equals: expected 10 +/- 1 but got 0
FAIL Invalid <mfrac> should fallback to mrow behaviour when computing preferred logical widths (count == 3) assert_approx_equals: expected 60 +/- 1 but got 0
FAIL Invalid <mfrac> should fallback to mrow behaviour when computing preferred logical widths (count == 4) assert_approx_equals: expected 100 +/- 1 but got 0
FAIL Invalid <mfrac> should fallback to mrow behaviour when computing preferred logical widths (count == 5) assert_approx_equals: expected 150 +/- 1 but got 0
PASS Invalid <mroot> should fallback to mrow behaviour when computing preferred logical widths (count == 0)
FAIL Invalid <mroot> should fallback to mrow behaviour when computing preferred logical widths (count == 1) assert_approx_equals: expected 10 +/- 1 but got 0
FAIL Invalid <mroot> should fallback to mrow behaviour when computing preferred logical widths (count == 3) assert_approx_equals: expected 60 +/- 1 but got 0
FAIL Invalid <mroot> should fallback to mrow behaviour when computing preferred logical widths (count == 4) assert_approx_equals: expected 100 +/- 1 but got 0
FAIL Invalid <mroot> should fallback to mrow behaviour when computing preferred logical widths (count == 5) assert_approx_equals: expected 150 +/- 1 but got 0
PASS Invalid <munder> should fallback to mrow behaviour when computing preferred logical widths (count == 0)
FAIL Invalid <munder> should fallback to mrow behaviour when computing preferred logical widths (count == 1) assert_approx_equals: expected 10 +/- 1 but got 0
FAIL Invalid <munder> should fallback to mrow behaviour when computing preferred logical widths (count == 3) assert_approx_equals: expected 60 +/- 1 but got 0
FAIL Invalid <munder> should fallback to mrow behaviour when computing preferred logical widths (count == 4) assert_approx_equals: expected 100 +/- 1 but got 0
FAIL Invalid <munder> should fallback to mrow behaviour when computing preferred logical widths (count == 5) assert_approx_equals: expected 150 +/- 1 but got 0
PASS Invalid <mover> should fallback to mrow behaviour when computing preferred logical widths (count == 0)
FAIL Invalid <mover> should fallback to mrow behaviour when computing preferred logical widths (count == 1) assert_approx_equals: expected 10 +/- 1 but got 0
FAIL Invalid <mover> should fallback to mrow behaviour when computing preferred logical widths (count == 3) assert_approx_equals: expected 60 +/- 1 but got 0
FAIL Invalid <mover> should fallback to mrow behaviour when computing preferred logical widths (count == 4) assert_approx_equals: expected 100 +/- 1 but got 0
FAIL Invalid <mover> should fallback to mrow behaviour when computing preferred logical widths (count == 5) assert_approx_equals: expected 150 +/- 1 but got 0
PASS Invalid <munderover> should fallback to mrow behaviour when computing preferred logical widths (count == 0)
FAIL Invalid <munderover> should fallback to mrow behaviour when computing preferred logical widths (count == 1) assert_approx_equals: expected 10 +/- 1 but got 0
FAIL Invalid <munderover> should fallback to mrow behaviour when computing preferred logical widths (count == 2) assert_approx_equals: expected 30 +/- 1 but got 0
FAIL Invalid <munderover> should fallback to mrow behaviour when computing preferred logical widths (count == 4) assert_approx_equals: expected 100 +/- 1 but got 0
FAIL Invalid <munderover> should fallback to mrow behaviour when computing preferred logical widths (count == 5) assert_approx_equals: expected 150 +/- 1 but got 0
PASS Invalid <msub> should fallback to mrow behaviour when computing preferred logical widths (count == 0)
FAIL Invalid <msub> should fallback to mrow behaviour when computing preferred logical widths (count == 1) assert_approx_equals: expected 10 +/- 1 but got 0
FAIL Invalid <msub> should fallback to mrow behaviour when computing preferred logical widths (count == 3) assert_approx_equals: expected 60 +/- 1 but got 0
FAIL Invalid <msub> should fallback to mrow behaviour when computing preferred logical widths (count == 4) assert_approx_equals: expected 100 +/- 1 but got 0
FAIL Invalid <msub> should fallback to mrow behaviour when computing preferred logical widths (count == 5) assert_approx_equals: expected 150 +/- 1 but got 0
PASS Invalid <msup> should fallback to mrow behaviour when computing preferred logical widths (count == 0)
FAIL Invalid <msup> should fallback to mrow behaviour when computing preferred logical widths (count == 1) assert_approx_equals: expected 10 +/- 1 but got 0
FAIL Invalid <msup> should fallback to mrow behaviour when computing preferred logical widths (count == 3) assert_approx_equals: expected 60 +/- 1 but got 0
FAIL Invalid <msup> should fallback to mrow behaviour when computing preferred logical widths (count == 4) assert_approx_equals: expected 100 +/- 1 but got 0
FAIL Invalid <msup> should fallback to mrow behaviour when computing preferred logical widths (count == 5) assert_approx_equals: expected 150 +/- 1 but got 0
PASS Invalid <msubsup> should fallback to mrow behaviour when computing preferred logical widths (count == 0)
FAIL Invalid <msubsup> should fallback to mrow behaviour when computing preferred logical widths (count == 1) assert_approx_equals: expected 10 +/- 1 but got 0
FAIL Invalid <msubsup> should fallback to mrow behaviour when computing preferred logical widths (count == 2) assert_approx_equals: expected 30 +/- 1 but got 0
FAIL Invalid <msubsup> should fallback to mrow behaviour when computing preferred logical widths (count == 4) assert_approx_equals: expected 100 +/- 1 but got 0
FAIL Invalid <msubsup> should fallback to mrow behaviour when computing preferred logical widths (count == 5) assert_approx_equals: expected 150 +/- 1 but got 0
PASS Invalid <mmultiscripts> should fallback to mrow behaviour when computing preferred logical widths (count == 0)
FAIL Invalid <mmultiscripts> should fallback to mrow behaviour when computing preferred logical widths (count == 2) assert_approx_equals: expected 30 +/- 1 but got 0
FAIL Invalid <mmultiscripts> should fallback to mrow behaviour when computing preferred logical widths (count == 4) assert_approx_equals: expected 100 +/- 1 but got 0
FAIL Invalid <mmultiscripts> should fallback to mrow behaviour when computing preferred logical widths (count == 7) assert_approx_equals: expected 220 +/- 1 but got 0
FAIL Invalid <mmultiscripts> should fallback to mrow behaviour when computing preferred logical widths (count == 9) assert_approx_equals: expected 390 +/- 1 but got 0
FAIL Invalid <mmultiscripts> should fallback to mrow behaviour when computing preferred logical widths (first in-flow child is an <mprescripts>) assert_approx_equals: expected 100 +/- 1 but got 61.78125
FAIL Invalid <mmultiscripts> should fallback to mrow behaviour when computing preferred logical widths (one of the even number of children after the first <mprescripts> is an <mprescripts>) assert_approx_equals: expected 220 +/- 1 but got 0

